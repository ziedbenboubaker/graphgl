schema {
  query: Query
  mutation: Mutation
}

type Query {
  getPosts: [Post!]!
  getPostById(id: ID!): Post
}

type Mutation {
  #authentication
  login(input: UserLoginInput!): String!
  register(input: UserRegisterInput!): String!

  createPost(content: String!): Post!
  deletePost(id: ID!): Boolean

  createComment(postId: ID!, content: String!): Comment!
  deleteComment(postId: ID!, commentId: ID!): Boolean

  likePost(postId: ID!): Boolean!
  dislikePost(postId: ID!): Boolean!
}

type User {
  id: ID!
  username: String!
  email: String!
}

type Post {
  id: ID!
  content: String!
  author: User!
  comments: [Comment!]!
  commentsCount: Int!
  lastComment: Comment
  likes: Likes!
  hasViewerLikesPost: Boolean!
  isViewerAuthor: Boolean!
  createdAt: Float!
}

type Comment {
  id: ID!
  author: User!
  isViewerAuthor: Boolean!
  content: String!
  createdAt: Float!
}

type Likes {
  totalCount: Int!
  likedBy: [User!]!
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserRegisterInput {
  username: String!
  email: String!
  password: String!
}
